<?php

declare(strict_types=1);

namespace App\Module\Catalog\Tests\Integration;

use App\Infrastructure\Symfony\Kernel;
use App\Module\Catalog\Domain\Event\ProductCreatedEvent;
use App\Module\Catalog\Domain\Event\ProductNameChangedEvent;
use App\Module\Catalog\Domain\Event\ProductPriceChangedEvent;
use App\Module\Catalog\Domain\Event\ProductRemovedEvent;
use App\Module\Catalog\Domain\ProductId;
use App\Module\Catalog\Domain\ProductName;
use App\Module\Catalog\Domain\ProductPrice;
use App\Module\Catalog\Infrastructure\Doctrine\Entity\ProductReadModel;
use App\Module\Catalog\Infrastructure\Doctrine\Projection\ProductProjection;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

final class ProductProjectionTest extends KernelTestCase
{
    private ProductProjection $projection;
    private EntityRepository $repo;
    private EntityManager $em;

    protected static $class = Kernel::class;

    protected function setUp()
    {
        parent::setUp();
        self::bootKernel();

        $this->projection = self::$container->get(ProductProjection::class);
        $this->repo = self::$container->get('doctrine.orm.entity_manager')
            ->getRepository(ProductReadModel::class);
        $this->em = self::$container->get('doctrine.orm.entity_manager');
        $this->em->beginTransaction();
    }

    public function testWhenProductCreatedEvent(): void
    {
        $id = ProductId::generate();
        $event = new ProductCreatedEvent(
            $id,
            ProductName::fromString('test'),
            ProductPrice::fromString('20', 'PLN')
        );

        $this->projection->whenProductCreatedEvent($event);

        /** @var ProductReadModel $product */
        $product = $this->repo->find($id->getId());
        self::assertInstanceOf(ProductReadModel::class, $product);
        self::assertTrue($product->getId()->equals($id->getId()));
        self::assertSame('test', $product->getName());
        self::assertSame('20', $product->getPrice());
        self::assertSame('PLN', $product->getCurrency());
    }

    public function testWhenProductNameChangedEvent(): void
    {
        $id = ProductId::generate();
        $product = (new ProductReadModel())
            ->setId($id->getId())
            ->setName('test')
            ->setPrice('20')
            ->setCurrency('PLN');
        $this->em->persist($product);
        $this->em->flush();
        $event = new ProductNameChangedEvent(
            $id,
            ProductName::fromString('test2')
        );

        $this->projection->whenProductNameChangedEvent($event);
        $product = $this->repo->find($id->getId());
        self::assertInstanceOf(ProductReadModel::class, $product);
        self::assertSame('test2', $product->getName());
    }

    public function testWhenProductPriceChangedEvent(): void
    {
        $id = ProductId::generate();
        $product = (new ProductReadModel())
            ->setId($id->getId())
            ->setName('test')
            ->setPrice('20')
            ->setCurrency('PLN');
        $this->em->persist($product);
        $this->em->flush();
        $event = new ProductPriceChangedEvent(
            $id,
            ProductPrice::fromString('30', 'PLN')
        );

        $this->projection->whenProductPriceChangedEvent($event);
        $product = $this->repo->find($id->getId());
        self::assertInstanceOf(ProductReadModel::class, $product);
        self::assertSame('30', $product->getPrice());
        self::assertSame('PLN', $product->getCurrency());
    }

    public function testWhenProductRemovedEvent(): void
    {
        $id = ProductId::generate();
        $product = (new ProductReadModel())
            ->setId($id->getId())
            ->setName('test')
            ->setPrice('20')
            ->setCurrency('PLN');
        $this->em->persist($product);
        $this->em->flush();
        $event = new ProductRemovedEvent(
            $id
        );

        $this->projection->whenProductRemovedEvent($event);
        $product = $this->repo->find($id->getId());
        self::assertNull($product);
    }

    protected function tearDown(): void
    {
        $this->em->rollback();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
